extends _layout

block content
  h1 Introduction

  p Concise CSS provides a solid foundation to stylize your website. It offers an alternative to frameworks like Bootstrap and Foundation, with the difference that Concise only includes the minimum styles required. That does not mean that the features are limited; is possible to use add-ons on top of the core to extend the functionality as required.
  p The core of the framework only includes styles for native HTML elements. Components and utilities are provided as optional add-ons, Concise UI and Concise Utils, respectively.
  p Concise CSS is written using a custom CSS preprocessor, built on top of Sass and some PostCSS plugins; this means that you can still write Sass code as usual, but you can also enjoy of other custom features, like the `lh` unit provided to handle vertical rhythm.

  h2#why Why Concise CSS

  p Concise CSS is a hybrid of the most common practices in web development. The small core allows the inclusion of custom styles and add-ons without the bloat or excessive overwrites. The UI add-on provides pre-made components as the other well-known frameworks, and the Utils add-on provides utility classes in the same style as #[a(href='http://basscss.com/') BassCSS] or #[a(href='http://tachyons.io/') Tachyons].

  p Also, we have adapted the framework to work with the #[a(href='http://rscss.io/') RSCSS] coding convention which provides a solid foundation to write website styles, separating them into components, elements, variants, and helpers. Both Concise UI and Concise Utils work well with RSCSS.

  p The core of the framework doesn't include any classes; it only provides normalization styles and the grid system—which unlike other grid systems—uses attributes instead of classes, providing a cleaner syntax and avoids conflicts in case you need to use a different one.

  p Because the current features of CSS are sometimes not enough, we have added some extra features. A worth mentioning addition is the <code>lh</code> unit that is translated to rems using the root line-height as the base value.

  h2#language-additions Language additions

  P The Concise CLI is a wrapper for the Sass compiler and PostCSS with some plugins; this allows us to add custom features with ease of use. You can still write usual Sass code plus the following:

  h3 lh Unit

  p The #[code lh] unit in meant to be used for spacing rules. A lh equals the line height of the #[code :root] element and is translated to a rem unit. Example:

  pre.language-scss: code.
    :root {
      line-height: 1.5;
    }

    section {
      margin-bottom: 1lh;
      padding-top: .5lh;
    }

  p In the previous example, #[code section] will have a #[code margin-bottom] with #[code 1] times the line height of the #[code :root] element, and the #[code padding-top] will have half of the size.

  p In this way, we can preserve the vertical rhythm in an easy way. Using a constant that is present in any Concise stylesheet and that provides aesthetic results by its nature.

  p The previous example—after compilation—will turned into the following:

  pre.language-scss: code.
    :root {
      line-height: 1.5;
    }

    section {
      margin-bottom: 1.5rem;
      padding-top: 0.75rem;
    }

  h3 Custom Media Queries

  p Usually, when you define media queries, you select a certain breakpoint from predefined sizes. With preprocessors like Sass this can be accomplished with simple variables, but in Concise we have a specific way to define breakpoints, and that is with custom media queries, and in this way, we make explicit that we are dealing with viewport sizes and not other types of variables.

  p The following custom media queries are predefined and ready to use, and this is also the way you define new custom media queries:

  pre.language-scss: code.
    @custom-media --extra-small (width <= 480px);
    @custom-media --small (width >= 480px);
    @custom-media --medium (width >= 768px);
    @custom-media --large (width >= 960px);
    @custom-media --extra-large (width >= 1100px);
    @custom-media --only-small (480px < width <= 768px);
    @custom-media --only-medium (768px < width <= 980px);
    @custom-media --only-large (980px < width <= 1100px);

  p Using those media queries is similar to simple variables, but prefixed with #[code --] instead of #[code $]. The following is an example of their use:

  pre.language-scss: code.
    @media (--medium) {
      // Styles for medium size devices and up (bigger than 768px)
    }

    @media ($breakpoint) {
      // The same as --small (dy default)
    }

  p Concise also includes a #[code $breakpoint] variable with the value of #[code --small] by default. This variable is used primarily in the #[em grid system], so this is the variable to change if you need to adjust the size where columns are collapsed.

  h3 Min/Max helpers for Media Queries

  p As you saw in the #[em custom media queries] section we saw how we can define new media queries, and you might have noticed the use of comparison symbols (#[code < > >= <=]) instead of the keywords #[code max-width] and #[code min-width]. Well, we have added those to improve the usability of media queries when using viewport sizes. Those can be used both in custom media queries as in normal media queries in your stylesheets.

  h2#installation Installation

  p There are 3 different options to install Concise CSS in your website, although the recommended way is to use NPM.

  h3 Using the CDN

  p If you just want to try Concise CSS or of you do not have plans to customize the styles, you can use our CDN, this is the easier way to get started with the framework—and if you like it—is recommended to switch to NPM so that you can customize the styles.

  pre.language-markup: code.
      /* Normal */
      &lt;link rel="stylesheet" href="https://cdn.concisecss.com/v4.0.0/concise.css">

      /* Minified */
      &lt;link rel="stylesheet" href="https://cdn.concisecss.com/v4.0.0/concise.min.css">

  h3 Install with NPM

  p Execute the following command to install Concise CSS from NPM, in this case. If you are new to NPM, you can check their #[a(href='https://docs.npmjs.com/') documentation].

  pre: code.
    npm install concise.css

  p Then you can include the main file inside your project:

  pre.language-scss: code.
    //
    // main.scss
    // ---------

    // Concise Core
    @import "node_modules/concise.css/concise";

  h3 Copy the Source Files

  p Finally, if you prefer, you can just copy the framework files to your project folder.

  p You can download the latest version from Github from #[a(href='https://github.com/ConciseCSS/concise.css/archive/master.zip') this link], and place the files wherever you need them.

  h2#concise-cli The Concise CLI

  p To build the source files, you need to install the Concise CLI globally:

  pre: code npm install -g concise-cli

  p Once it is installed, you can compile source files with the #[code concisecss compile] command:

  pre: code concisecss compile input.scss output.css

  p When compiling the source code, Autoprefixer will automatically add the required browser prefixers.

  h2#add-ons Using Add-ons

  p The core styles of Concise CSS can be extended by using add-ons. They are just separate packages that use the same settings from the core of the framework.

  p Currently, there are two official add-ons: Concise UI and Concise Utils. The first one includes a series of UI components that can be used directly, as you would with frameworks like Bootstrap or Foundation. The second one contains single-responsibility classes, similar to frameworks like #[a(href='http://www.basscss.com/') BassCSS] or #[a(href='http://tachyons.io/') Tachyons].

  p You can check all the styles available in those add-ons in their respective pages: #[a(href='http://concisecss.com/documentation/ui') Concise UI] and #[a(href='http://concisecss.com/documentation/utils') Concise Utils].

  h3 From the CDN

  p As with the core styles, you can include the styles from the add-ons directly using our CDN.

  pre.language-markup: code.
    &lt;!-- CONCISE UI -->

    &lt;!-- Normal -->
    &lt;link rel="stylesheet" href="https://cdn.concisecss.com/ui/v1.0.0/concise-ui.css">

    &lt;!-- Minified -->
    &lt;link rel="stylesheet" href="https://cdn.concisecss.com/ui/v1.0.0/concise-ui.min.css">


    &lt;!-- CONCISE UTILS -->

    &lt;!-- Normal -->
    &lt;link rel="stylesheet" href="https://cdn.concisecss.com/utils/v1.0.0/concise-utils.css">

    &lt;!-- Minified -->
    &lt;link rel="stylesheet" href="https://cdn.concisecss.com/utils/v1.0.0/concise-utils.min.css">

  h3 With NPM

  p You can also install the add-ons with NPM:

  pre: code.
    npm install concise-utils

    npm install concise-ui

  p Then include them in your main file as the other styles:

  pre.language-scss: code.
    // Concise Utils
    @import "node_modules/concise-utils/concise-utils"

    // Concise UI
    @import "node_modules/concise-utils/concise-ui"

  h3 Downloading the Packages

  p Those packages are also available to download from Github, using the following links: #[a(href='https://github.com/ConciseCSS/concise-ui/archive/master.zip') Download Concise UI] and #[a(href='https://github.com/ConciseCSS/concise-utils/archive/master.zip') Download Concise Utils]. Then you have to include the files in your project as you need them.

  h2#coding-conventions Coding Conventions

  p Concise CSS uses #[a(href='http://rscss.io/') RSCSS], #[em a set of simple ideas to guide your process of building maintainable CSS]. Although that is not mandatory to follow those rules in your projects, you could get a more predictable code base by using it.

  p Is recommended to read those guidelines before working with Concise CSS to understand how this framework itself is organized and to help you to organize your projects.

  p Official website of RSCSS: #[a(href='http://rscss.io/') http://rscss.io/]