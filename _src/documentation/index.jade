h1 Getting started

h2 Configuration

h3 Customization

p
  | We have tried to make Concise as easy as possible for you to customize.
  | Included in the "<strong>Source SASS</strong>" download package, there is a
  | <code>/custom</code> folder which includes two files: <code>_custom.scss</code>
  | and <code>_globals.scss</code>. The first file is included to allow you to
  | add custom styles on top of what is already included. In the second file, you
  | can override the variables that are included in Concise by default.

p
  | You can use these two files to customize styles as you see fit, and you can
  | then compile them using the instructions on
  | <a href="https://github.com/ConciseCSS/concise.css/blob/master/CONTRIBUTING.md#building-the-project">
  | how to build the project</a>.

h3 Sanitize.css

p
  | Concise includes Jonathan Neal's lovely
  | <a href="http://jonathantneal.github.io/sanitize.css/" target="_blank">sanitize.css</a>
  | to help in standardizing styles for common elements across multiple browsers.
  | However, we have adjusted the package to include only what was needed for
  | Concise, so it does not include 100% of the sanitize.css code.

h3 Disabling Responsiveness

p
  | Not interested in the responsive design that comes with Concise by default?
  | Have no fear, disabling responsiveness can be accomplished with a few easy
  | steps.

p
  | First, we need to ensure that the following <code>&lt;meta&gt;</code> tags
  | are <em>not</em> present in our website's <code>&lt;head&gt;</code> section.

pre
  code.
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta name="HandheldFriendly" content="True"&gt;
    &lt;meta name="MobileOptimized" content="320"&gt;

p
  | In your custom CSS files, or in <code>&lt;style&gt;</code> tags, you need to
  | set a fixed width for your container element (I'm using 960 pixels as example):

pre
  code [container] { width: 960px !important; }

p
  | This overrides the Concise responsive container that is enabled by default.


h2 Examples

p
  | We have a couple of pre-built templates that take advantage of the core Concise
  | styles that should help you get started working on your own projects.

h3 Bare Bones

p
  | To get started with a bare-bones responsive website using Concise, we recommend
  | structuring your template as such:

pre
  code.
    &lt;!doctype html&gt;
    &lt;html&gt;
    &lt;head&gt;
      &lt;meta charset=&quot;utf-8&quot;&gt;
      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
      &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;True&quot;&gt;
      &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;

      &lt;title&gt;Concise Template&lt;/title&gt;

      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/concise.min.css&quot; /&gt;
    &lt;/head&gt;

    &lt;body&gt;&lt;/body&gt;
    &lt;/html&gt;

p
  | Right there, you have a basic template with all included files, proper meta
  | tags for responsiveness, and you're ready to start coding.

h3 Other Examples

div(row)
  div(column="4")
    a(href="/examples/starter")
      img(src="/images/example-starter.png" alt="Example starter template").media--fluid

  div(column="4")
    a(href="/examples/masthead")
      img(src="/images/example-masthead.png" alt="Example masthead template").media--fluid

  div(column="4")
    a(href="/examples/narrow")
      img(src="/images/example-narrow.png" alt="Example narrow template").media--fluid


h2 File Organization

h3 Pre-Compiled Concise

p
  | The Concise directory is pretty simple. Here is what you are looking at for
  | the regular distribution download:

pre
  code.
    /css
      concise.css
      concise.min.css

h3 Concise Source Code

p
  | If you are downloading the SASS package, the folder structure will look like:

p.note
  | All of the files labeled with an underscore are referred to as <em>partials</em>.
  | A partial is a file that does not become compiled on its own, but rather,
  | is included in a master file (in this case, it's <code>concise.scss</code>)
  | to be compiled.</p>

pre
  code.
    /dist
      /css
        concise.css
        concise.min.css
    /src
      /sass
        /addons
          /concise-ui
            /components
              _alerts.scss
              _badges.scss
              _breadcrumbs.scss
              _buttons.scss
              _cards.scss
              _collections.scss
              _dropdowns.scss
              _groups.scss
              _labels.scss
              _modals.scss
              _progress.scss
              _spinner.scss
              _tooltips.scss
            _concise-ui.scss
        /core
          /globals
            _functions.scss
            _globals.scss
            _mixins.scss
          /layout
            _base.scss
            _blockquotes.scss
            _buttons.scss
            _forms.scss
            _headings.scss
            _lists.scss
            _print.scss
            _tables.scss
            _type.scss
          /utils
            _atgrid.scss
            _colors.scss
            _conditional-styling.scss
            _helpers.scss
        /custom
          _custom.scss
          _globals.scss
        concise.scss
    /test
      test.html
    .editorconfig
    .gitattributes
    .gitignore
    LICENSE
    README.md
    package.json


h2 Functions &amp; Mixins

p
  | Concise leverages the power of SASS to include mixins and functions that
  | help with common tasks.

h3 Mixins

h4 clearfix()

p
  | This mixin takes no parameters, and is only used to generate CSS that will
  | clear both left and right floats.

h4 container()

p
  | This mixin takes no parameters, and is only used to generate a container for
  | content that is the width of the <code>$container-width</code> variable.

h4 row()

p
  | This mixin generates CSS for a row that is used to contain columns.

div.table--responsive
  table.table
    thead
      tr
        th(scope='col') Parameter
        th(scope='col') Type
        th(scope='col') Description

    tbody
      tr
        td: code $clear-gutter
        td Boolean
        td Set false to contain columns without gutter (Default is <code>true</code>)

h4 column()

p
  | Use this mixin to generate CSS for a column.

div.table--responsive
  table.table
    thead
      tr
        th(scope='col') Parameter
        th(scope='col') Type
        th(scope='col') Description

    tbody
      tr
        td: code $size
        td Fraction
        td The size of the column, should be a number between 0-1. (Example: <code>1/2</code>)

      tr
        td: code $add-gutter
        td Boolean
        td Set this to false if you want to create a column without gutter (Default is <code>true</code>)

h3 Functions

h4 unitSize()

p
  | Use this function to set sizes with proportions. This can help maintain
  | vertical rhythm, and keep your design consistent.

div.table--responsive
  table.table
    thead
      tr
        th(scope='col') Parameter
        th(scope='col') Type
        th(scope='col') Description

    tbody
      tr
        td: code $multiplier
        td Number
        td Amount to multiply the base unit by (8px by default)


      tr
        td: code $offset
        td Number
        td A value in pixels which will be added to the result. This can be positive for addition or negative for subtraction (default is 0)


h4 pxToEm()

p
  | This function converts <code>px</code> units to <code>em</code> units based
  | off of the base font-size. This is used throughout the framework for
  | calculating font-sizes.

.table--responsive
  table.table
    thead
      tr
        th(scope='col') Parameter
        th(scope='col') Type
        th(scope='col') Description

    tbody
      tr
        td: code $px
        td Number
        td The value in pixels to convert

      tr
        td: code $base
        td Number
        td The base font-size used to calculate <code>em</code> units (Default is <code>$font-base-size</code>)

h4 getColor()

p
  | Using this function, you can easily retrieve colors from the <code>$colors</code>
  | map and use them throughout your design.

.table--responsive
  table.table
    thead
      tr
        th(scope='col') Parameter
        th(scope='col') Type
        th(scope='col') Description

    tbody
      tr
        td: code $color
        td String
        td The name of the color to retrieve

      tr
        td: code $value
        td Color
        td The shade of the color to retrieve


h2 Naming Conventions

p
  | Concise's naming conventions are influenced by the work being done on the
  | <a href="https://github.com/suitcss/suit" target="_blank">SUIT CSS
  | framework</a>. This framework relies on structured class names and
  | meaningful hyphens (<strong>i.e.</strong>, not using hyphens merely to
  | separate words). This is to help work around the current limits of
  | applying CSS to the DOM (i.e., the lack of style encapsulation) and to
  | better communicate the relationships between classes.

p
  strong
   | Syntax: <code><componentName>[--modifierName|-descendantName]</code>

p
 | Component driven development offers several benefits when reading and
 | writing HTML and CSS:

ol
  li It helps to distinguish between the classes for the root of the
  | component, descendant elements, and modifications.
  li It keeps the specificity of selectors low.
  li It helps to decouple presentation semantics from document semantics.

p
  | You can think of components as custom elements that enclose specific
  | semantics, styling, and behavior.

h4 componentName

p
  | The component's name must be written in camel case.

pre
 code
  | .myComponent { ... }

pre
  code
    | &lt;div class="myComponent"&gt;
    |   ...
    | &lt;/div&gt;

h4 componentName--modifierName

p
  | A component modifier is a class that modifies the presentation of the base
  | component in some form. Modifier names must be written in camel case and be
  | separated from the component name by two hyphens. The class should be
  | included in the HTML in addition to the base component class.

pre
  code
    | .btn { ... }
    | .btn--primary { ... }
    | &lt;button class="btn btn--primary"&gt;...&lt;/button&gt;

h4 componentName-descendantName

p
  | A component descendant is a class that is attached to a descendant of a
  | component. It's responsible for applying presentation directly to the
  | descendant on behalf of a particular component. Descendant names must be
  | written in camel case.

pre
  code
    | &lt;div class="tweet"&gt;
    |   &lt;div class="tweet-header"&gt;
    |     &lt;img class="tweet-avatar"&gt;
    |   &lt;/div&gt;

pre
  code
    |   &lt;div class="tweet-body"&gt;
    |     ...
    |   &lt;/div&gt;
    | &lt;/div&gt;

h4 componentName.is-stateOfComponent

p
  | Use <code>is-stateName</code> for state-based modifications of components.
  | The state name must be camel case. Please don't style these classes
  | directly; they should always be used as an adjoining class.

p
  | JS can add/remove these classes. This means that the same state names can be
  | used in multiple contexts, but every component must define its own styles
  | for the state (as they are scoped to the component).

pre
  code
    | .dropdown { ... }
    | .dropdown.is-open { ... }
    | &lt;div class="dropdown is-open"&gt;
    |   ...
    | &lt;/div&gt;


h2 Semantics

p
  | Concise is built on a set of simple but important principles that aid in
  | effective and manageable web design. By understanding these principles,
  | Concise can be used to its full potential, and we can create a better
  | paradigm for using HTML and CSS to build websites.

p
  | Concise was built with semantics in mind. Semantics in regard to web design,
  | for those unfamiliar with the term, describes the use of readable and
  | meaningful HTML tags and CSS class names used to build a website.

p
  | Meaningful names are those such as <code>.article-content</code>. This class
  | name easily explains that this portion of our website is the content of an
  | article. This class name is not too verbose, and provides <em>meaning</em>
  | and <em>context</em> for our code.

p
  | Thanks to the utility classes that Concise provides, we can also very easily
  | style this class so that it fits into our layout. Say we want our articles
  | to take up 8 columns and our sidebar to take up 4. Our HTML could look like:

pre
  code.
    &lt;div column=&quot;8&quot;&gt;
      Article
    &lt;/div&gt;

    &lt;div column=&quot;4&quot;&gt;
      Sidebar
    &lt;/div&gt;

p
  | Or, we could use an included SASS mixin to have this make a little more sense:

pre
  code.
    .article {
      @include column(8);
    }

    .sidebar {
      @include column(4);
    }

pre
  code.
    &lt;div class=&quot;article&quot;&gt;
      Article
    &lt;/div&gt;

    &lt;div class=&quot;sidebar&quot;&gt;
      Sidebar
    &lt;/div&gt;

p
  | While this does add some CSS overhead to your project, it makes a lot more
  | sense than just using the <code>column="*"</code> attributes, and would be much
  | easier to find inside of your CSS or SASS document.

h2 Table of contents

div(row).toc
  div(column='6')
    h3 Core
    ol
      li: a(href='/documentation/core/typography') Typography
      li: a(href='/documentation/core/headings') Headings
      li: a(href='/documentation/core/lists') Lists
      li: a(href='/documentation/core/buttons') Buttons
      li: a(href='/documentation/core/code') Code
      li: a(href='/documentation/core/forms') Forms
      li: a(href='/documentation/core/tables') Tables
      li: a(href='/documentation/core/grid') Grid System
      li: a(href='/documentation/core/alignment') Alignment
      li: a(href='/documentation/core/breakpoints') Breakpoints
      li: a(href='/documentation/core/fluid-media') Fluid Media
      li: a(href='/documentation/core/conditional' ) Conditional Styling
      li: a(href='/documentation/core/colors') Colors
      li: a(href='/documentation/core/screen-reader') Screen Reader
      li: a(href='/documentation/core/misc') Misc

  div(column='6')
    h3 Concise UI
    ol
      li: a(href='/documentation/concise-ui/alerts') Alerts
      li: a(href='/documentation/concise-ui/badges-labels') Badges & Labels
      li: a(href='/documentation/concise-ui/breadcrumbs') Breadcrumbs
      li: a(href='/documentation/concise-ui/buttons') Buttons
      li: a(href='/documentation/concise-ui/cards') Cards
      li: a(href='/documentation/concise-ui/collections') Collections
      li: a(href='/documentation/concise-ui/dropdowns') Dropdowns
      li: a(href='/documentation/concise-ui/groups') Groups
      li: a(href='/documentation/concise-ui/modals') Modals
      li: a(href='/documentation/concise-ui/progress') Progress Bars
      li: a(href='/documentation/concise-ui/spinner') Spinner
      li: a(href='/documentation/concise-ui/tooltips') Tooltips
